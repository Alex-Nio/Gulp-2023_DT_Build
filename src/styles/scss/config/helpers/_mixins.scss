//? BG opacity
@mixin background-opacity($color, $opacity: 0.3) {
	background: $color;
	background: rgba($color, $opacity);
}

//? Responsive background img Netflix technique
@mixin responsive-bg-image($image-width, $image-height) {
	display: block;
	background-size: cover;
	height: 0;
	padding-bottom: percentage($image-height / $image-width);
}

//? Pseudo-elements centered
@mixin after-centered {
	content: "";
	position: absolute;
	top: 50%;
	left: 50%;
	width: 100%;
	height: 100%;
	transform: translate(-50%, -50%);
}

//? Pseudo-elements centered
@mixin before-centered {
	content: "";
	position: absolute;
	top: 50%;
	left: 50%;
	width: 100%;
	height: 100%;
	transform: translate(-50%, -50%);
}

//? Font Styling
@mixin fs($font-family, $font-size, $color, $weight) {
	font-family: $font-family, sans-serif;
	font-size: $font-size;
	color: $color;
	font-style: normal;
	font-weight: $weight;
	line-height: 100%;
}

//? Transitions
@mixin defaultTransition {
	transition: all 0.3s linear;
}

@mixin fastTransition {
	transition: all 0.1s ease-in-out;
}

@mixin slowTransition {
	transition: all 0.5s linear;
}

//? Hovers
@mixin baze-hover($color) {
	&:hover {
		background-color: darken($color: $color, $amount: 8%);
		@include defaultTransition;
	}
}

//? Сброс margin первого и последнего
@mixin reset-horizontal-margin {
	&:first-child {
		margin-left: 0;
	}

	&:last-child {
		margin-right: 0;
	}
}

@mixin reset-vertical-margin {
	&:first-child {
		margin-top: 0;
	}

	&:last-child {
		margin-bottom: 0;
	}
}

//? Адаптивное свойство
@mixin adaptive-value($property, $startSize, $minSize, $type) {
	$addSize: $startSize - $minSize;
	@if $type == 1 {
		// Только если меньше контейнера
		#{$property}: $startSize + px;
		@media (max-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
		}
	} @else if $type == 2 {
		// Только если больше контейнера
		#{$property}: $startSize + px;
		@media (min-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
		}
	} @else {
		// Всегда
		#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
	}
}

// Mobile disabled hover
@mixin hover {
	@media (any-hover: hover) {
		&:hover {
			@content;
		}
	}
}

// Burger
@mixin burger {
	--burger-width: 30px;
	--burger-height: 18px;
	--burger-line-height: 1px;

	position: relative;
	border: none;
	padding: 0;
	width: var(--burger-width);
	height: var(--burger-height);
	color: #fff;
	background-color: transparent;
	cursor: pointer;

	&::before,
	&::after {
		content: "";
		position: absolute;
		left: 0;
		width: 100%;
		height: var(--burger-line-height);
		background-color: currentColor;
		transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;
	}

	&::before {
		top: 0;
	}

	&::after {
		top: calc(100% - var(--burger-line-height));
	}

	&__line {
		position: absolute;
		left: 0;
		top: 50%;
		width: 100%;
		height: var(--burger-line-height);
		background-color: currentColor;
		transform: translateY(-50%);
		transition: transform 0.3s ease-in-out;
	}

	&--active {
		&::before {
			top: 50%;
			transform: rotate(45deg);
			transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;
		}

		&::after {
			top: 50%;
			transform: rotate(-45deg);
			transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;
		}

		.burger__line {
			transform: scale(0);
			transition: transform 0.3s ease-in-out;
		}
	}
}
